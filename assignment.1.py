# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QaG7uTSx85pb32lERxFyz57yMRm8n_nf
"""

#1. Write a code to reverse a string.

string = 'pwskills'
print(string[::-1])

#2. write a code to count the number of vowels in a string

text = input('enter the text:')

count = 0

l = ['a','e','i','o','u']

for char in text:
    if char in l:
        count = count+1
print(count)

#3. write a code to check if a given string is a palindrome or not.

a = input('enter string:')
b=a[-1::-1]
if (a==b):
    print('Palindrome')
else:
    print('Nor Palindrome')

a = input('enter string:')
b=a[-1::-1]
if (a==b):
    print('Palindrome')
else:
    print('Nor Palindrome')

#4. write a code to check if two given strings are anagrams of each other.

# Both strings should be of equal lenth
# Both strings should have same characters in same order of different order this is a anagrams.

str1 = input('enter string1:')
str2 = input('enter string2:')

if len(str1) != len(str2):
    print('not anagrams')
else:
    if sorted(str1) == sorted(str2):
        print('strings are anagrams')
    else:
        print('not anagrams')

#5. Write a code to find all occurrences of a given substring within another string

s1 = input('enter any string:')
s2 = input('enter substring:')

f = 0
for i in range(len(s1)):
    for j in range(len(s2)):
        if s1[i] == s2[j]:
            j = j+1
        else:
            j = 0
    if j==len(s2):
        f = 1
        print('substring found at:', i-len(s2)+1)
if f == 0:
    print('not found')

#6. Write a code to perform basic string compression using the count of repeated charecter

def compress(string):
    compressed_string = ''
    count = 1
    for i in range(1, len(string)):
        if string[i] == string[i-1]:
            count +=1
        else:
            compressed_string += string[i-1] + str(count)
            count = 1
    compressed_string += string[-1] + str(count)
    return compressed_string


string = 'aaabbccccd'
compressed_string = compress(string)
print(compressed_string)

#7. Write a code to determine if a string has unique character

def check_unique_chars(string):
    if string is None:
        return False
    for char in string:
        if string.count(char) >1:
            return False
    return True
print(check_unique_chars('cat'))
print(check_unique_chars('appele'))

#8. Write a code to conert a given string to uppercase or lowercase

string = input('Enter a String')
if (string.isupper()):
    print(string.lower())

string_1 = input('Enter a String')
if (string_1.islower()):
    print(string_1.upper())

#9. Write a code to count the number of words in a string

str1 = len(input('enter a string:'))
print(str1)

#10. Write a code to concatenate two string without using the + operator

def concatenate_strings(str1, str2):

  new_string = ""


  for char in str1:
    new_string += char


  for char in str2:
    new_string += char


  return new_string


str1 = "Hello, "
str2 = "world!"

concatenated_string = concatenate_strings(str1, str2)

print(concatenated_string)

# 11. Write a code remove all occurrences of a specific element from a list.

def remove_all(list1, item):
    while item in list1:
        list1.remove(item)

list1 = [1,2,3,4,5,6,7,8,9,10]
item = 5

remove_all(list1, item)

print(list1)

# 12. implement a code to find the second largest number in a given list of integers.

def second_largest(list):
    list.sort()
    return list[-2]

li=[]
n=int(input("Enter size of list "))
for i in range(0,n):
    e=int(input("Enter element of list "))
    li.append(e)

print("second largest in ",li,"is")
print(second_largest(li))

# 13. Creat a code to count the occurrences of each element in a list and return a dictonary with elements as key and their counts as values.

def count_occurrences(list1):
    dict1 = {}

    for element in list1:
        if element in dict1:
            dict1[element] += 1
        else:
            dict1[element] = 1
    return dict1

list1 = [1, 2, 3, 1, 2, 1, 3, 4, 5, 4, 2, 2]
result = count_occurrences(list1)

print(result)

# 14. write a code reverse a list in-place without using any built-in reverse function

def reverse(list1):
    start = 0
    end = len(list1) - 1
    while start < end:
        list1[start], list1[end] = list1[end], list1[start]
        start += 1
        end -= 1


# Driver code
list1 = [1, 2, 3, 4, 5]
reverse(list1)
print(list1)

# 15. Implement a code to find and remove duplicates from a list while preserving the original order of elements.

def remove_duplicates(list1):

    list2 = []

    for x in list1:
        if x not in list2:
            list2.append(x)
    return list2

list1 = [1, 2, 3, 4, 5, 1, 2, 3]
print(remove_duplicates(list1))

# 16. Creat a code to check if a given list is sorted (either in ascending or descending order) or not

def is_sorted(lst):

    if len(lst) <= 1:
        return True

    asc = True
    for i in range(1, len(lst)):
        if lst[i] < lst[i - 1]:
            asc = False
            break

    desc = True
    for i in range(1, len(lst)):
        if lst[i] > lst[i - 1]:
            desc = False
            break

    return asc or desc


# Test the function.
print(is_sorted([1, 2, 3]))
print(is_sorted([3, 2, 1]))
print(is_sorted([1, 2, 3, 2, 1]))
print(is_sorted([1, 1, 1]))

# 17. Write a code to marge two sorted lists into a single sorted list.

def merge_sorted_lists(list1, list2):

  merged_list = []
  i = 0
  j = 0
  while i < len(list1) and j < len(list2):
    if list1[i] < list2[j]:
      merged_list.append(list1[i])
      i += 1
    else:
      merged_list.append(list2[j])
      j += 1

  while i < len(list1):
    merged_list.append(list1[i])
    i += 1

  while j < len(list2):
    merged_list.append(list2[j])
    j += 1

  return merged_list


list1 = [1, 3, 5, 7, 9]
list2 = [2, 4, 6, 8, 10]

merged_list = merge_sorted_lists(list1, list2)

print(merged_list)

# 18. Implement a code to find the intersation of two given lists.

def intersection(lst1, lst2):

	return [item for item in lst1 if item in lst2]

lst1 = [['a', 'c'], ['d', 'e']]
lst2 = [['a', 'c'], ['e', 'f'], ['d', 'e']]
print(intersection(lst1, lst2))

#19. Creat a code to find the union of two lists without duplicates.

list1 = [1, 2, 3, 4, 5]
list2 = [3, 4, 5, 6, 7]

set1 = set(list1)
set2 = set(list2)

union_set = set1.union(set2)

union_list = list(union_set)

print(union_list)

# 20. Write a code to shuffle a given list randomly without using any built in-shuffle functions.

import random

numbers = [1,2,3,4,5,6,7,8,9,10]

numbers2 = numbers[:]

random.shuffle(numbers2)

print(numbers2)

# 21. Write a code that takes two tuples as input as return a new tuple containing elements that are common to both input tuples

def common_elements(tuple1, tuple2):

 set1 = set(tuple1)
 set2 = set(tuple2)

 common_elements = set1.intersection(set2)

 return tuple(common_elements)


tuple1 = (1, 2, 3, 4, 5)
tuple2 = (3, 4, 5, 6, 7)

common_elements = common_elements(tuple1, tuple2)

print(common_elements)

# 22. Creat a code that prompts the user to enter two sets of integers saparated by commas. Then, print the intersetion of these two sets

s1 = {1, 2, 3}
s2 = {2, 3}
print(s1.intersection(s2))

# 23. Write a code to concatenate two tuples. The function slould take two tuples as input and return a new tuple containing elements from both input tuples.

def concatenate_tuples(tup1, tup2):
    return tup1 + tup2

tuple1 = (1, 2, 3)
tuple2 = (4, 5, 6)

result = concatenate_tuples(tuple1, tuple2)

print(result)

#24. Devlop a code that prompts the user to input two sets of strings. Then, print the elements that are present in the first set but not in the second list.

set1 = set(input("Enter the first set of strings, separated by commas: ").split(","))
set2 = set(input("Enter the second set of strings, separated by commas: ").split(","))

difference = set1 - set2

print("The following elements are present in the first set but not in the second list:")
for element in difference:
    print(element)

#25. Creat a code that takes a tuple and two integers as input. The function should return a new tuple containing elements from the original tuple within the specified range of

def get_range_tuple(tuple1, start, end):

  if start < 0 or end > len(tuple1):
    raise ValueError("Invalid start or end index.")

  return tuple1[start:end]

tuple1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
start =2
end = 6

new_tuple = get_range_tuple(tuple1, start, end)

print(new_tuple)

# 26. Write a code that prompts the user to input two sets of characters. Then, print the union of these two sets.

def main():
  set1 = input("Enter the first set of characters: ")
  set2 = input("Enter the second set of characters: ")

  set1 = set(set1)
  set2 = set(set2)

  union = set1.union(set2)

  print("The union of the two sets is:", union)

if __name__ == "__main__":
  main()

#27. Devlop a code that takes a tuple of integers as input. The function should return the maximun and minimum value from the tuple using tuple unpacking.

def find_max_min(test_tup):

  a, b, c, d, e = test_tup



  # Find the maximum and minimum values.

  max_val = max(a, b, c, d, e)

  min_val = min(a, b, c, d, e)



  # Return the maximum and minimum values.

  return max_val, min_val





# Test the function.

test_tup = (5, 20, 3, 7, 6, 8)

max_val, min_val = find_max_min(test_tup)



print("The maximum value is:", max_val)

print("The minimum value is:", min_val)

#28. Creat a code that defines two sets of integers. The, print the union, intersection, and difference of these two sets

A = {0, 2, 4, 6, 8};
B = {1, 2, 3, 4, 5};

print("Union :", A | B)

print("Intersection :", A & B)

print("Difference :", A - B)

print("Symmetric difference :", A ^ B)

# 29. Write a code that takes a tuple and an element as input. The function should return the count of occurrences of the given element in the tuple.

def count_occurrences(tuple, element):

  count = 0
  for item in tuple:
    if item == element:
      count += 1
  return count

tuple = (1, 2, 3, 4, 5, 1, 2, 3)
element = 1

count = count_occurrences(tuple, element)

print(count)

# 30. Devlop a code thet prompts the users to input two sets of strings. Then, print the symmetric difference of thes two sets.

set1 = {1, 2, 3}
set2 = {3, 4, 5}

result = set1.symmetric_difference(set2)
print(result)

#31. Write a code that takes a list of word as input and return a dictionary whera the keys are unique words and the values are the frequencies of those words in input list.

def CountFrequency(my_list):

	freq = {}
	for item in my_list:
		if (item in freq):
			freq[item] += 1
		else:
			freq[item] = 1

	for key, value in freq.items():
		print("% d : % d" % (key, value))

if __name__ == "__main__":
	my_list = [1, 1, 1, 5, 5, 3, 1, 3, 3, 1, 4, 4, 4, 2, 2, 2, 2]

	CountFrequency(my_list)

# 32. Write a code that takes two dictionaries as input and merges them into a single dictionary. If there are common keys, the value should be added together.

def merge_dictionaries(dict1, dict2):

  merged_dict = {}
  for key in dict1:
    if key in dict2:
      merged_dict[key] = dict1[key] + dict2[key]
    else:
      merged_dict[key] = dict1[key]
  for key in dict2:
    if key not in merged_dict:
      merged_dict[key] = dict2[key]
  return merged_dict


dict1 = {'a': 100, 'b': 200, 'c': 300}
dict2 = {'a': 300, 'b': 200, 'd': 400}

merged_dict = merge_dictionaries(dict1, dict2)

print(merged_dict)

# 33. Write a code to access a value in a nested dictionary. The function should take the dictionary and list of keys and input, and return the corresponding
#value. If any of the keys do not exit in the dictionary, the function should return None.

def get_value(dictionary, keys):

 for key in keys:
    if key not in dictionary:
      return None
    dictionary = dictionary[key]
 return dictionary


my_dict = {
 "a": {
   "b": {
     "c":1
   }
 }
}

keys = ["a", "b", "c"]

value = get_value(my_dict, keys)

print(value)

# 34. Write a code that takes a dictionary as input and return a sorted version of it based on the values. You can choose whether to sort in ascending or discending order.

def sort_dictionary(d, ascending=True):

  sorted_items = sorted(d.items(), key=lambda item: item[1], reverse=not ascending)
  return dict(sorted_items)

d = {'a': 1, 'b': 2, 'c': 3}

sorted_d = sort_dictionary(d)
print(sorted_d)

# 35. Write a code that inverts a dictionary, swapping keys and values. Ensure that the inverted dictionary correctlu handles case where multiple keys have the same value by storing the keys as a list in the inverted dictionary.

def invert_dict(d):

  inverted_dict = {}
  for key, value in d.items():
    if value not in inverted_dict:
      inverted_dict[value] = [key]
    else:
      inverted_dict[value].append(key)
  return inverted_dict


# Example usage:

d = {"a": 1, "b": 2, "c": 1}
inverted_dict = invert_dict(d)
print(inverted_dict)

